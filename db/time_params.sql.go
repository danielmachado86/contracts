// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: time_params.sql

package db

import (
	"context"
	"time"
)

const createTimeParam = `-- name: CreateTimeParam :one
INSERT INTO time_params (
  contract_id,
  name,
  value
) VALUES (
  $1, $2, $3
)
RETURNING id, contract_id, name, value
`

type CreateTimeParamParams struct {
	ContractID int64     `json:"contractID"`
	Name       string    `json:"name"`
	Value      time.Time `json:"value"`
}

func (q *Queries) CreateTimeParam(ctx context.Context, arg CreateTimeParamParams) (TimeParam, error) {
	row := q.db.QueryRowContext(ctx, createTimeParam, arg.ContractID, arg.Name, arg.Value)
	var i TimeParam
	err := row.Scan(
		&i.ID,
		&i.ContractID,
		&i.Name,
		&i.Value,
	)
	return i, err
}

const deleteTimeParam = `-- name: DeleteTimeParam :exec
DELETE FROM time_params
WHERE id = $1
`

func (q *Queries) DeleteTimeParam(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTimeParam, id)
	return err
}

const getTimeParam = `-- name: GetTimeParam :one
SELECT id, contract_id, name, value FROM time_params
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTimeParam(ctx context.Context, id int64) (TimeParam, error) {
	row := q.db.QueryRowContext(ctx, getTimeParam, id)
	var i TimeParam
	err := row.Scan(
		&i.ID,
		&i.ContractID,
		&i.Name,
		&i.Value,
	)
	return i, err
}

const listTimeParams = `-- name: ListTimeParams :many
SELECT id, contract_id, name, value FROM time_params
WHERE contract_id = $1
ORDER BY value
LIMIT $2
OFFSET $3
`

type ListTimeParamsParams struct {
	ContractID int64 `json:"contractID"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) ListTimeParams(ctx context.Context, arg ListTimeParamsParams) ([]TimeParam, error) {
	rows, err := q.db.QueryContext(ctx, listTimeParams, arg.ContractID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TimeParam{}
	for rows.Next() {
		var i TimeParam
		if err := rows.Scan(
			&i.ID,
			&i.ContractID,
			&i.Name,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTimeParam = `-- name: UpdateTimeParam :one
UPDATE time_params SET value = $2
WHERE id = $1
RETURNING id, contract_id, name, value
`

type UpdateTimeParamParams struct {
	ID    int64     `json:"id"`
	Value time.Time `json:"value"`
}

func (q *Queries) UpdateTimeParam(ctx context.Context, arg UpdateTimeParamParams) (TimeParam, error) {
	row := q.db.QueryRowContext(ctx, updateTimeParam, arg.ID, arg.Value)
	var i TimeParam
	err := row.Scan(
		&i.ID,
		&i.ContractID,
		&i.Name,
		&i.Value,
	)
	return i, err
}
