// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: signature.sql

package db

import (
	"context"
)

const createSignature = `-- name: CreateSignature :one
INSERT INTO signatures (
  username,
  contract_id
) VALUES (
  $1, $2
)
RETURNING username, contract_id, created_at
`

type CreateSignatureParams struct {
	Username   string `json:"username"`
	ContractID int64  `json:"contractID"`
}

func (q *Queries) CreateSignature(ctx context.Context, arg CreateSignatureParams) (Signature, error) {
	row := q.db.QueryRowContext(ctx, createSignature, arg.Username, arg.ContractID)
	var i Signature
	err := row.Scan(&i.Username, &i.ContractID, &i.CreatedAt)
	return i, err
}

const deleteSignature = `-- name: DeleteSignature :exec
DELETE FROM signatures
WHERE username = $1 AND contract_id = $2
`

type DeleteSignatureParams struct {
	Username   string `json:"username"`
	ContractID int64  `json:"contractID"`
}

func (q *Queries) DeleteSignature(ctx context.Context, arg DeleteSignatureParams) error {
	_, err := q.db.ExecContext(ctx, deleteSignature, arg.Username, arg.ContractID)
	return err
}

const getSignature = `-- name: GetSignature :one
SELECT username, contract_id, created_at FROM signatures
WHERE username = $1 AND contract_id = $2 LIMIT 1
`

type GetSignatureParams struct {
	Username   string `json:"username"`
	ContractID int64  `json:"contractID"`
}

func (q *Queries) GetSignature(ctx context.Context, arg GetSignatureParams) (Signature, error) {
	row := q.db.QueryRowContext(ctx, getSignature, arg.Username, arg.ContractID)
	var i Signature
	err := row.Scan(&i.Username, &i.ContractID, &i.CreatedAt)
	return i, err
}

const listContractSignatures = `-- name: ListContractSignatures :many
SELECT username, contract_id, created_at FROM signatures
WHERE contract_id = $1
ORDER BY username
LIMIT $2
OFFSET $3
`

type ListContractSignaturesParams struct {
	ContractID int64 `json:"contractID"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) ListContractSignatures(ctx context.Context, arg ListContractSignaturesParams) ([]Signature, error) {
	rows, err := q.db.QueryContext(ctx, listContractSignatures, arg.ContractID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Signature{}
	for rows.Next() {
		var i Signature
		if err := rows.Scan(&i.Username, &i.ContractID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
