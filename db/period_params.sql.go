// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: period_params.sql

package db

import (
	"context"
)

const createPeriodParam = `-- name: CreatePeriodParam :one
INSERT INTO period_params (
  contract_id,
  name,
  value,
  units
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, contract_id, name, value, units
`

type CreatePeriodParamParams struct {
	ContractID int64       `json:"contractID"`
	Name       string      `json:"name"`
	Value      int32       `json:"value"`
	Units      PeriodUnits `json:"units"`
}

func (q *Queries) CreatePeriodParam(ctx context.Context, arg CreatePeriodParamParams) (PeriodParam, error) {
	row := q.db.QueryRowContext(ctx, createPeriodParam,
		arg.ContractID,
		arg.Name,
		arg.Value,
		arg.Units,
	)
	var i PeriodParam
	err := row.Scan(
		&i.ID,
		&i.ContractID,
		&i.Name,
		&i.Value,
		&i.Units,
	)
	return i, err
}

const deletePeriodParam = `-- name: DeletePeriodParam :exec
DELETE FROM period_params
WHERE id = $1
`

func (q *Queries) DeletePeriodParam(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePeriodParam, id)
	return err
}

const getPeriodParam = `-- name: GetPeriodParam :one
SELECT id, contract_id, name, value, units FROM period_params
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPeriodParam(ctx context.Context, id int64) (PeriodParam, error) {
	row := q.db.QueryRowContext(ctx, getPeriodParam, id)
	var i PeriodParam
	err := row.Scan(
		&i.ID,
		&i.ContractID,
		&i.Name,
		&i.Value,
		&i.Units,
	)
	return i, err
}

const listPeriodParams = `-- name: ListPeriodParams :many
SELECT id, contract_id, name, value, units FROM period_params
WHERE contract_id = $1
ORDER BY value
LIMIT $2
OFFSET $3
`

type ListPeriodParamsParams struct {
	ContractID int64 `json:"contractID"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) ListPeriodParams(ctx context.Context, arg ListPeriodParamsParams) ([]PeriodParam, error) {
	rows, err := q.db.QueryContext(ctx, listPeriodParams, arg.ContractID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PeriodParam{}
	for rows.Next() {
		var i PeriodParam
		if err := rows.Scan(
			&i.ID,
			&i.ContractID,
			&i.Name,
			&i.Value,
			&i.Units,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePeriodParam = `-- name: UpdatePeriodParam :one
UPDATE period_params SET value = $2
WHERE id = $1
RETURNING id, contract_id, name, value, units
`

type UpdatePeriodParamParams struct {
	ID    int64 `json:"id"`
	Value int32 `json:"value"`
}

func (q *Queries) UpdatePeriodParam(ctx context.Context, arg UpdatePeriodParamParams) (PeriodParam, error) {
	row := q.db.QueryRowContext(ctx, updatePeriodParam, arg.ID, arg.Value)
	var i PeriodParam
	err := row.Scan(
		&i.ID,
		&i.ContractID,
		&i.Name,
		&i.Value,
		&i.Units,
	)
	return i, err
}
